/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef teacher_H
#define teacher_H

#include <thrift/TDispatchProcessor.h>
#include "student_types.h"



class teacherIf {
 public:
  virtual ~teacherIf() {}
  virtual int32_t put(const Student& s) = 0;
};

class teacherIfFactory {
 public:
  typedef teacherIf Handler;

  virtual ~teacherIfFactory() {}

  virtual teacherIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(teacherIf* /* handler */) = 0;
};

class teacherIfSingletonFactory : virtual public teacherIfFactory {
 public:
  teacherIfSingletonFactory(const boost::shared_ptr<teacherIf>& iface) : iface_(iface) {}
  virtual ~teacherIfSingletonFactory() {}

  virtual teacherIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(teacherIf* /* handler */) {}

 protected:
  boost::shared_ptr<teacherIf> iface_;
};

class teacherNull : virtual public teacherIf {
 public:
  virtual ~teacherNull() {}
  int32_t put(const Student& /* s */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _teacher_put_args__isset {
  _teacher_put_args__isset() : s(false) {}
  bool s;
} _teacher_put_args__isset;

class teacher_put_args {
 public:

  teacher_put_args() {
  }

  virtual ~teacher_put_args() throw() {}

  Student s;

  _teacher_put_args__isset __isset;

  void __set_s(const Student& val) {
    s = val;
  }

  bool operator == (const teacher_put_args & rhs) const
  {
    if (!(s == rhs.s))
      return false;
    return true;
  }
  bool operator != (const teacher_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const teacher_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class teacher_put_pargs {
 public:


  virtual ~teacher_put_pargs() throw() {}

  const Student* s;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _teacher_put_result__isset {
  _teacher_put_result__isset() : success(false) {}
  bool success;
} _teacher_put_result__isset;

class teacher_put_result {
 public:

  teacher_put_result() : success(0) {
  }

  virtual ~teacher_put_result() throw() {}

  int32_t success;

  _teacher_put_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const teacher_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const teacher_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const teacher_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _teacher_put_presult__isset {
  _teacher_put_presult__isset() : success(false) {}
  bool success;
} _teacher_put_presult__isset;

class teacher_put_presult {
 public:


  virtual ~teacher_put_presult() throw() {}

  int32_t* success;

  _teacher_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class teacherClient : virtual public teacherIf {
 public:
  teacherClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  teacherClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t put(const Student& s);
  void send_put(const Student& s);
  int32_t recv_put();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class teacherProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<teacherIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (teacherProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  teacherProcessor(boost::shared_ptr<teacherIf> iface) :
    iface_(iface) {
    processMap_["put"] = &teacherProcessor::process_put;
  }

  virtual ~teacherProcessor() {}
};

class teacherProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  teacherProcessorFactory(const ::boost::shared_ptr< teacherIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< teacherIfFactory > handlerFactory_;
};

class teacherMultiface : virtual public teacherIf {
 public:
  teacherMultiface(std::vector<boost::shared_ptr<teacherIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~teacherMultiface() {}
 protected:
  std::vector<boost::shared_ptr<teacherIf> > ifaces_;
  teacherMultiface() {}
  void add(boost::shared_ptr<teacherIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t put(const Student& s) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(s);
    }
    return ifaces_[i]->put(s);
  }

};



#endif
