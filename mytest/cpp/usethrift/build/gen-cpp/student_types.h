/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef student_TYPES_H
#define student_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class Student;

typedef struct _Student__isset {
  _Student__isset() : no(false), name(false), gendor(false), age(false) {}
  bool no :1;
  bool name :1;
  bool gendor :1;
  bool age :1;
} _Student__isset;

class Student : public virtual ::apache::thrift::TBase {
 public:

  Student(const Student&);
  Student& operator=(const Student&);
  Student() : no(0), name(), gendor(0), age(0) {
  }

  virtual ~Student() throw();
  int32_t no;
  std::string name;
  bool gendor;
  int16_t age;

  _Student__isset __isset;

  void __set_no(const int32_t val);

  void __set_name(const std::string& val);

  void __set_gendor(const bool val);

  void __set_age(const int16_t val);

  bool operator == (const Student & rhs) const
  {
    if (!(no == rhs.no))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(gendor == rhs.gendor))
      return false;
    if (!(age == rhs.age))
      return false;
    return true;
  }
  bool operator != (const Student &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Student & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Student &a, Student &b);

inline std::ostream& operator<<(std::ostream& out, const Student& obj)
{
  obj.printTo(out);
  return out;
}



#endif
