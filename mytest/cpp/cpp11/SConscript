#1. Env setttings
import os
env=Environment(ENV=os.environ)
env.Append(CXXFLAGS="--std=c++11")
#2. Targets
env.Program(target='atomicVsMutex', source='atomicVsMutex.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='atomic_flag', source='atomic_flag.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='cas', source='cas.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='condition', source='condition.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='decl', source='decl.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='noexcept', source='noexcept.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='objectModel01', source='objectModel01.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='poly', source='poly.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='qualifiedEnum', source='qualifiedEnum.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='shareFromThis', source='shareFromThis.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='stdtls', source='stdtls.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='tempFunction', source='tempFunction.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='templateContainer', source='templateContainer.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='testConditionWait', source='testConditionWait.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='testIterator', source='testIterator.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='testSetDifference', source='testSetDifference.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='testStdThreadExit', source='testStdThreadExit.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='testStringCow', source='testStringCow.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='testTemplate', source='testTemplate.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='testTraits', source='testTraits.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='testVariadic', source='testVariadic.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='threadMutex', source='threadMutex.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='threadWait', source='threadWait.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='typeDeductionForInitializerlist', source='typeDeductionForInitializerlist.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='useDecay', source='useDecay.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='usec11', source='usec11.c', LIBS=['atomic', 'pthread'])
env.Program(target='usefuture', source='usefuture.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='usehashmap', source='usehashmap.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='usehashset', source='usehashset.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='uselock', source='uselock.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='usemultiset', source='usemultiset.cpp', LIBS=['atomic', 'pthread'])
