#1. Env setttings
import os
env=Environment(ENV=os.environ)
env.Append(CXXFLAGS="--std=c++14")
#2. Targets
env.Program(target='atomics', source='atomics.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='autoReturn', source='autoReturn.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='bindImpl', source='bindImpl.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='decltypeAuto', source='decltypeAuto.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='indexSequence', source='indexSequence.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='makeSequence', source='makeSequence.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='newLambda', source='newLambda.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='pv', source='pv.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='testStdThread', source='testStdThread.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='threadFuture', source='threadFuture.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='traits', source='traits.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='usepackagedtask', source='usepackagedtask.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='usepromise', source='usepromise.cpp', LIBS=['atomic', 'pthread'])
env.Program(target='userDefinedLiteral', source='userDefinedLiteral.cpp', LIBS=['atomic', 'pthread'])
