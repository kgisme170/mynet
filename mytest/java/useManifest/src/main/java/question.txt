Java weak reference is not freed after System.gc():

I've got a simple snippet:

    Integer integer = 2;
    WeakReference<Integer> wi = new WeakReference<>(integer);
    WeakReference<Integer> sr = new WeakReference<>(new Integer(3));
    System.out.println(wi.get());
    System.out.println(sr.get());
    System.gc();
    System.out.println("step 1 wi = " + wi.get());
    System.out.println("step 1 sr =: " + sr.get());
    integer = null;
    System.gc();
    try {
        Thread.sleep(1000);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    System.out.println("step 1 wi = " + wi.get());
    System.out.println("step 1 sr =: " + sr.get());

The "System.gc()" call should force all weak reference to be recycled, right, and I even waited 1 second to make sure gc() happens.
But even when "integer = null" is set, "wi" refuse to be null. While sr is null right after "System.gc()". It prints:

    2
    3
    step 1 wi = 2
    step 1 sr =: null
    step 1 wi = 2
    step 1 sr =: null

My questions:
(1) What is the core difference between wi and sr?
(2 )how to make jvm recycle wi?

Thanks a lot.