// TODO output doesn't support.
@output =
    SELECT *
    FROM(
        VALUES
        (
            "West Virginia",
            new SqlArray<string>(new string[]{ "Charleston", "Huntington", "Parkersburg", "Morgantown", "Wheeling"})
        ),
        (
            "Wisconsin",
            SqlArray.Create(new string[]{ "Milwaukee", "Madison", "GreenBay", "Kenosha", "Racine"})
        )
) AS T(State, Cities);
OUTPUT @output
TO "output/complex01.txt"
USING Outputters.Text();

DECLARE @wv_cities = new string [] { "Charleston", "Huntington", "Parkersburg", "Morgantown", "Wheeling"};
DECLARE @wi_cities = new string [] { "Milwaukee", "Madison", "Green Bay", "Kenosha", "Racine" };
@cities =
    SELECT *
    FROM(
        VALUES
        (
            "West Virginia",
            new SqlArray<string>(@wv_cities)
        ),
        (
            "Wisconsin",
            SqlArray.Create(@wi_cities)
        )
) AS T(State, Cities);
OUTPUT @cities
TO "output/complex02.tsv"
USING Outputters.Tsv();

@cities =
    SELECT *
    FROM(
        VALUES
        (
            "Vermont",
            "Burlington,Essex,South,Burlington,Colchester,Rutland"
        ),
        (
            "Virginia",
            "Virginia Beach,Norfolk,Chesapeake,Richmond,Newport News"
        ),
        (
            "Washington",
            "Seattle,Spokane,Tacoma,Vancouver,Bellevue"
        ),
        (
            "West Virginia",
            "Charleston,Huntington,Parkersburg,Morgantown,Wheeling"
        ),
        (
            "Wisconsin",
            "Milwaukee,Madison,Green Bay,Kenosha,Racine"
        ),
        (
            "Wyoming",
            "Cheyenne,Casper,Laramie,Gillette,Rock Springs"
        )
) AS T(State, Cities);
OUTPUT @cities
TO "output/complex03.tsv"
USING Outputters.Tsv();

@cities1 =
    SELECT State,
           SqlArray.Create(Cities.Split(',')) AS Cities
    FROM @cities;
OUTPUT @cities1
TO "output/complex04.tsv"
USING Outputters.Tsv();

@output2 =
    SELECT State,
           Cities[0]AS FirstCity
    FROM @output;
OUTPUT @cities1
TO "output/complex05.tsv"
USING Outputters.Tsv();

@output =
    SELECT State,
           SqlArray.Create(Cities.Where(c => c.StartsWith("C"))) AS Cities
    FROM @output;
OUTPUT @output
TO "output/complex06.tsv"
USING Outputters.Tsv();

@output =
SELECT
State ,
SqlArray.Create( Cities.Where( c=>c.StartsWith("C") ) ) AS Cities
FROM @output;
@output =
    SELECT State,
           Cities,
           Cities.Count AS NumCities
    FROM @output;
OUTPUT @output
TO "output/complex07.tsv"
USING Outputters.Tsv();

@projectmembers =
    SELECT *
    FROM(
        VALUES
        (
            "Website",
            new SqlMap<string, string>{
            {"Mallory", "PM"},
            {"Bob", "Dev"},
            {"Alice", "Dev"},
            {"Stan", "Dev"},
            {"Chris", "UX"},
            }
        ),
        (
            "DB",
            new SqlMap<string, string>{
            {"Ted", "Test"},
            {"Joe", "Dev"},
            {"Chuck", "Dev"}
            }
        )
)
AS T(Project, Members);
OUTPUT @projectmembers
TO "output/complex08.tsv"
USING Outputters.Tsv();

@output =
    SELECT Project,
           new SqlMap<string, string>(Members.Where(kv => kv.Key != "Mallory")) AS Members
    FROM @projectmembers;
OUTPUT @output
TO "output/complex09.tsv"
USING Outputters.Tsv();

@output =
    SELECT Project,
           SqlMap.Create(Members.Where(kv => kv.Key != "Mallory")) AS Members
    FROM @projectmembers;
OUTPUT @output
TO "output/complex10.tsv"
USING Outputters.Tsv();

@projectmembers =
    SELECT *
    FROM(
        VALUES
        (
            "Website",
            "Mallory",
            "PM"
        ),
        (
            "Website",
            "Bob",
            "Dev"
        ),
        (
            "Website",
            "Alice",
            "Dev"
        ) ,
        (
            "Website",
            "Stan",
            "Dev"
        ) ,
        (
            "Website",
            "Chris",
            "UX"
        ) ,
        (
            "DB",
            "Ted",
            "Test"
        ),
        (
            "DB",
            "Joe",
            "Dev"
        ) ,
        (
            "DB",
            "Chuck",
            "Dev"
        )
)
AS T(Project, Employee, Role);
OUTPUT @projectmembers
TO "output/complex11.tsv"
USING Outputters.Tsv();

@projectmembers =
    SELECT Project,
           MAP_AGG<string, string>(Employee, Role) AS Members
    FROM @projectmembers
    GROUP BY Project;
OUTPUT @projectmembers
TO "output/complex12.tsv"
USING Outputters.Tsv();

@output5 =
    SELECT Project,
           SqlMap.Create(Members.Where(kv => kv.Value != "Dev")) AS Members
    FROM @projectmembers;
OUTPUT @output5
TO "output/complex13.tsv"
USING Outputters.Tsv();

@output6 =
    SELECT Project,
           Members,
           Members.Count AS Count
    FROM @projectmembers;
OUTPUT @output6
TO "output/complex14.tsv"
USING Outputters.Tsv();

@output7 =
    SELECT Project,
           Members["Mallory"]AS MalloryRole
    FROM @projectmembers;
OUTPUT @output7
TO "output/complex15.tsv"
USING Outputters.Tsv();

@output8 =
    SELECT Project,
           Members.ContainsKey("Mallory") AS ContainsMallory
    FROM @projectmembers;
OUTPUT @output8
TO "output/complex16.tsv"
USING Outputters.Tsv();